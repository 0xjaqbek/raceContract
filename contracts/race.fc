#include "imports/stdlib.fc";

;; Constants
const int ENTRY_FEE = 1000000000; ;; 1 TON
const int PAYOUT_PERCENTAGE = 90;
const int SECONDS_IN_DAY = 86400;

;; Storage structure
;; owner:MsgAddress lastPayout:uint64 totalFees:uint120 currentTournamentNumber:uint32 bestTime:uint64 bestPlayer:MsgAddress
;; playerEntries:(HashmapE 267 (PlayerEntry))

;; PlayerEntry structure: time:uint64 timestamp:uint64 tournamentNumber:uint32

() save_data(slice owner, int lastPayout, int totalFees, int currentTournamentNumber, int bestTime, slice bestPlayer, cell playerEntries) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_uint(lastPayout, 64)
        .store_uint(totalFees, 120)
        .store_uint(currentTournamentNumber, 32)
        .store_uint(bestTime, 64)
        .store_slice(bestPlayer)
        .store_dict(playerEntries)
        .end_cell());
}

(slice, int, int, int, int, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),    ;; owner
        ds~load_uint(64),      ;; lastPayout
        ds~load_uint(120),     ;; totalFees
        ds~load_uint(32),      ;; currentTournamentNumber
        ds~load_uint(64),      ;; bestTime
        ds~load_msg_addr(),    ;; bestPlayer
        ds~load_dict()         ;; playerEntries
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    
    (slice owner, int lastPayout, int totalFees, int currentTournamentNumber, int bestTime, slice bestPlayer, cell playerEntries) = load_data();
    
    int op = in_msg_body~load_uint(32);
    
    if (op == 0x44) { ;; Deploy
        ;; Contract deployment logic (if needed)
        return ();
    }
    
    if (op == 0x9fd3) { ;; RecordTime
        throw_unless(450, msg_value >= ENTRY_FEE);
        
        int time = in_msg_body~load_uint(64);
        int currentTimestamp = now();
        
        totalFees += ENTRY_FEE;
        
        int sender_key = sender_address.preload_uint(256);
        playerEntries~udict_set_builder(267, sender_key, begin_cell()
            .store_uint(time, 64)
            .store_uint(currentTimestamp, 64)
            .store_uint(currentTournamentNumber, 32));
        
        if ((bestTime == 0) | (time < bestTime)) {
            bestTime = time;
            bestPlayer = sender_address;
        }
        
        save_data(owner, lastPayout, totalFees, currentTournamentNumber, bestTime, bestPlayer, playerEntries);
        return ();
    }
    
    if (op == 0xf8a7) { ;; DistributePrize
        int tournamentNumber = in_msg_body~load_uint(32);
        int currentDay = now() / SECONDS_IN_DAY;
        int lastPayoutDay = lastPayout / SECONDS_IN_DAY;
        
        throw_unless(451, currentDay > lastPayoutDay);
        throw_unless(452, tournamentNumber < currentTournamentNumber);
        throw_unless(453, ~ equal_slices(bestPlayer, begin_cell().store_uint(0, 2).end_cell().begin_parse()));
        
        int sender_key = sender_address.preload_uint(256);
        (slice playerEntry, int success) = playerEntries.udict_get?(267, sender_key);
        throw_unless(454, success);
        throw_unless(455, playerEntry~load_uint(32) == tournamentNumber);
        
        int prizeAmount = (totalFees * PAYOUT_PERCENTAGE) / 100;
        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(bestPlayer)
            .store_coins(prizeAmount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
        
        totalFees -= prizeAmount;
        lastPayout = currentDay * SECONDS_IN_DAY;
        bestTime = 0;
        bestPlayer = begin_cell().store_uint(0, 2).end_cell().begin_parse();
        currentTournamentNumber += 1;
        
        save_data(owner, lastPayout, totalFees, currentTournamentNumber, bestTime, bestPlayer, playerEntries);
        return ();
    }
    
    if (op == 0x0cab) { ;; WithdrawFees
        throw_unless(456, equal_slices(sender_address, owner));
        
        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(owner)
            .store_coins(totalFees)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);
        
        totalFees = 0;
        
        save_data(owner, lastPayout, totalFees, currentTournamentNumber, bestTime, bestPlayer, playerEntries);
        return ();
    }
    
    throw(0xffff);
}

;; Get methods

(int, int, int, slice) get_info() method_id {
    (slice owner, int lastPayout, int totalFees, int currentTournamentNumber, int bestTime, slice bestPlayer, _) = load_data();
    return (bestTime, totalFees, currentTournamentNumber, bestPlayer);
}

(int, int, int) get_player_entry(slice player_address) method_id {
    (_, _, _, _, _, _, cell playerEntries) = load_data();
    int player_key = player_address.preload_uint(256);
    (slice playerEntry, int success) = playerEntries.udict_get?(267, player_key);
    if (success) {
        return (playerEntry~load_uint(64), playerEntry~load_uint(64), playerEntry~load_uint(32));
    } else {
        return (0, 0, 0);
    }
}